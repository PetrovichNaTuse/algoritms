// Algoritm 3. insertion sort

/**
 * Сравнивает следующее несортированное число справа с уже
 * отсортированными слева. После каждого прохода количество
 * отсортированных чисел слева увеличивается на 1. Число
 * ситается отсортированным если предыдущее сортированное
 * число меньше текущего (сравниваемого).
 **/
function insertion_sort(arr) {
  // Вспомогательная переменная для перестановок
  var len = arr.length;
  // Цикл по не отсортированным элементам справа
  for(var i = 1; i < len; i++) {
    var self = arr[i], j = i - 1; 
    while(j >= 0 && self < arr[j])
      arr[j + 1] = arr[j], j--;
    arr[j + 1] = self;
  }
  return arr;
}

const is = bench(insertion_sort); // обёртка для замеров
is(randomArray(100000, {from: -1346236, to: 2656346}));
